// <auto-generated />
using System;
using LogisticsAid_API.Context;
using LogisticsAid_API.Entities.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LogisticsAid_API.Migrations
{
    [DbContext(typeof(LogisticsAidDbContext))]
    [Migration("20250429083837_CircularDependenciesRemove")]
    partial class CircularDependenciesRemove
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender", new[] { "female", "male", "special" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "route_point_type", new[] { "loading", "unloading" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "transport_type", new[] { "trailer", "truck" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LogisticsAid_API.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("number");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("province");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street");

                    b.HasKey("Id");

                    b.HasIndex("Country", "Province", "City", "Street", "Number")
                        .IsUnique();

                    b.ToTable("addresses", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Auxiliary.RoutePointTrip", b =>
                {
                    b.Property<Guid>("RoutePointId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_point_id");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid")
                        .HasColumnName("trip_id");

                    b.HasKey("RoutePointId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("route_point_trip", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.CarrierCompany", b =>
                {
                    b.Property<string>("CompanyName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("company_name");

                    b.HasKey("CompanyName");

                    b.ToTable("carrier_companies", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Company", b =>
                {
                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_name");

                    b.HasKey("CompanyName");

                    b.ToTable("companies", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("CarrierCompanyCompanyName")
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CustomerCompanyCompanyName")
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("CarrierCompanyCompanyName");

                    b.HasIndex("CustomerCompanyCompanyName");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("contact_info", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.CustomerCompany", b =>
                {
                    b.Property<string>("CompanyName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("company_name");

                    b.HasKey("CompanyName");

                    b.ToTable("customer_companies", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Driver", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<string>("CarrierCompanyCompanyName")
                        .HasColumnType("character varying(250)");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("licence");

                    b.HasKey("ContactId");

                    b.HasIndex("CarrierCompanyCompanyName");

                    b.ToTable("drivers", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Logistician", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<bool>("HasAdminPrivileges")
                        .HasColumnType("boolean")
                        .HasColumnName("admin_privileges");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("password_salt");

                    b.HasKey("ContactId");

                    b.ToTable("logisticians", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.RoutePoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("additional_info");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company_name");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer")
                        .HasColumnName("sequence");

                    b.Property<ERoutePointType>("Type")
                        .HasColumnType("route_point_type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("route_points", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Transport", b =>
                {
                    b.Property<string>("LicensePlate")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("license_plate");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brand");

                    b.Property<string>("CarrierCompanyCompanyName")
                        .HasColumnType("character varying(250)");

                    b.Property<ETransportType>("TransportType")
                        .HasColumnType("transport_type")
                        .HasColumnName("type");

                    b.HasKey("LicensePlate");

                    b.HasIndex("CarrierCompanyCompanyName");

                    b.ToTable("transport", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CargoName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cargo_name");

                    b.Property<decimal>("CargoWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("cargo_weight");

                    b.Property<string>("CarrierCompanyId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("carrier_company_id");

                    b.Property<decimal>("CarrierPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("carrier_price");

                    b.Property<string>("CustomerCompanyId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("customer_company_id");

                    b.Property<decimal>("CustomerPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("customer_price");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<DateTime>("LoadingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("loading_date");

                    b.Property<Guid>("LogisticianId")
                        .HasColumnType("uuid")
                        .HasColumnName("logistician_id");

                    b.Property<string>("ReadableId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("readable_id");

                    b.Property<string>("TrailerId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("trailer_id");

                    b.Property<string>("TruckId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("truck_id");

                    b.Property<DateTime>("UnloadingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("unloading_date");

                    b.Property<bool>("WithTax")
                        .HasColumnType("boolean")
                        .HasColumnName("with_tax");

                    b.HasKey("Id");

                    b.HasIndex("CarrierCompanyId");

                    b.HasIndex("CustomerCompanyId");

                    b.HasIndex("DriverId");

                    b.HasIndex("LogisticianId");

                    b.HasIndex("ReadableId")
                        .IsUnique();

                    b.HasIndex("TrailerId");

                    b.HasIndex("TruckId");

                    b.ToTable("trips", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Auxiliary.RoutePointTrip", b =>
                {
                    b.HasOne("LogisticsAid_API.Entities.RoutePoint", "RoutePoint")
                        .WithMany("RoutePointTrips")
                        .HasForeignKey("RoutePointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsAid_API.Entities.Trip", "Trip")
                        .WithMany("RoutePointTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RoutePoint");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.ContactInfo", b =>
                {
                    b.HasOne("LogisticsAid_API.Entities.CarrierCompany", null)
                        .WithMany("Contacts")
                        .HasForeignKey("CarrierCompanyCompanyName");

                    b.HasOne("LogisticsAid_API.Entities.CustomerCompany", null)
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerCompanyCompanyName");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Driver", b =>
                {
                    b.HasOne("LogisticsAid_API.Entities.CarrierCompany", null)
                        .WithMany("Drivers")
                        .HasForeignKey("CarrierCompanyCompanyName");

                    b.HasOne("LogisticsAid_API.Entities.ContactInfo", "ContactInfo")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Logistician", b =>
                {
                    b.HasOne("LogisticsAid_API.Entities.ContactInfo", "ContactInfo")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.RoutePoint", b =>
                {
                    b.HasOne("LogisticsAid_API.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Transport", b =>
                {
                    b.HasOne("LogisticsAid_API.Entities.CarrierCompany", null)
                        .WithMany("Transport")
                        .HasForeignKey("CarrierCompanyCompanyName");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Trip", b =>
                {
                    b.HasOne("LogisticsAid_API.Entities.CarrierCompany", "CarrierCompany")
                        .WithMany()
                        .HasForeignKey("CarrierCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsAid_API.Entities.CustomerCompany", "CustomerCompany")
                        .WithMany()
                        .HasForeignKey("CustomerCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsAid_API.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsAid_API.Entities.Logistician", "Logistician")
                        .WithMany()
                        .HasForeignKey("LogisticianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsAid_API.Entities.Transport", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsAid_API.Entities.Transport", "Truck")
                        .WithMany()
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarrierCompany");

                    b.Navigation("CustomerCompany");

                    b.Navigation("Driver");

                    b.Navigation("Logistician");

                    b.Navigation("Trailer");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.CarrierCompany", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Drivers");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.CustomerCompany", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.RoutePoint", b =>
                {
                    b.Navigation("RoutePointTrips");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Trip", b =>
                {
                    b.Navigation("RoutePointTrips");
                });
#pragma warning restore 612, 618
        }
    }
}
