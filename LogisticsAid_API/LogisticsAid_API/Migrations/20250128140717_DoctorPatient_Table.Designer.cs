// <auto-generated />
using System;
using HealthQ_API.Context;
using HealthQ_API.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HealthQ_API.Migrations
{
    [DbContext(typeof(HealthqDbContext))]
    [Migration("20250128140717_DoctorPatient_Table")]
    partial class DoctorPatient_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender", new[] { "female", "male", "special" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_type", new[] { "administrator", "doctor", "patient" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LogisticsAid_API.Entities.Auxiliary.DoctorPatient", b =>
                {
                    b.Property<string>("DoctorEmail")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("PatientEmail")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.HasKey("DoctorEmail", "PatientEmail");

                    b.HasIndex("PatientEmail");

                    b.ToTable("doctor_patient", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Auxiliary.UserQuestionnaire", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "QuestionnaireId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("user_questionnaire", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.QuestionnaireModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("QuestionnaireContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("questionnaire_content");

                    b.HasKey("Id");

                    b.ToTable("questionnaires", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.UserModel", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<EGender>("Gender")
                        .HasColumnType("gender")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("password_salt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone_number");

                    b.Property<EUserType>("UserType")
                        .HasColumnType("user_type")
                        .HasColumnName("user_type");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("username");

                    b.HasKey("Email");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Auxiliary.DoctorPatient", b =>
                {
                    b.HasOne("LogisticsAid_API.Entities.UserModel", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogisticsAid_API.Entities.UserModel", "Patient")
                        .WithMany("Doctors")
                        .HasForeignKey("PatientEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.Auxiliary.UserQuestionnaire", b =>
                {
                    b.HasOne("LogisticsAid_API.Entities.QuestionnaireModel", "Questionnaire")
                        .WithMany("UserQuestionnaires")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogisticsAid_API.Entities.UserModel", "User")
                        .WithMany("UserQuestionnaires")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.QuestionnaireModel", b =>
                {
                    b.Navigation("UserQuestionnaires");
                });

            modelBuilder.Entity("LogisticsAid_API.Entities.UserModel", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");

                    b.Navigation("UserQuestionnaires");
                });
#pragma warning restore 612, 618
        }
    }
}
